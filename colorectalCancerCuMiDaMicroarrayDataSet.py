# -*- coding: utf-8 -*-
"""ResearchTest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19aqSq9rD4jOILYDGHU_jTbHEOL78hmB8
"""

import pandas as pd
import numpy as np
from sklearn.metrics import mean_squared_error, accuracy_score
import numpy as np
import pandas as pd
import sklearn
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn import svm
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.metrics import mean_squared_error, accuracy_score
from random import sample
import matplotlib.pyplot as plt
import matplotlib.lines as mlines
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from scipy.stats import pearsonr
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier

"""## **Microarray Colorectal Cancer Dataset from CuMiDa is used**"""

#Mount the google drive for data access
from google.colab import drive
drive.mount('/content/drive')

"""## **Filtering the data to include only Normal (Group 4) and Metastasis (Group 3)**"""

#Read the original gene expression data from the GSE77593
data = pd.read_csv('drive/MyDrive/expression_data_filter_mean_final.csv')

data =  data

data

data = data[data['type'] != 1.0]
data = data[data['type'] != 2.0]
data

data = data.drop(['Unnamed: 0'], axis = 1)
data

# correlation coefficient

type3 = data[data['type'] == 3.0 ]
type4 = data[data['type'] == 4.0 ]

type3.drop('type', axis = 1)

type4.drop('type', axis = 1)















type3 = type3.drop('type' , axis = 1)

type4 = type4.drop('type' , axis = 1)

type3





"""## **Calculate the Pearson Correlation Coefficient**

"""

# calculate pearson correlation coefficient

geneCorr = []
for id, gene in enumerate(type3.columns):
  corrCoeff, pVal = pearsonr(type3.iloc[:,id], type4.iloc[:,id])
  geneCorr.append((corrCoeff, pVal))

geneCorr

correlationList = [abs(i[0]) for i in geneCorr]

correlationList

top100GeneIndices = np.argsort(correlationList)[-100:]



top100Genes = type3.columns[list(top100GeneIndices)]

top100Genes

filteredData = data.loc[:,top100Genes]

filteredData

filteredDataType = pd.concat([filteredData,data.iloc[:,-1]], axis=1, ignore_index=True)

filteredDataType

filteredDataType.set_index(pd.Index(range(len(filteredDataType))), inplace=True)

filteredDataType



"""## **Using Leave-One-Out Cross-Validation Approach to Filter Genes**"""

finalAcc = []


for g in range(100):

  train = filteredDataType
  #acc = []

  predictionsRF = []
  actual = []

  for sampleID in range(22):

    trainCV = train.copy()
    #indexUse = trainCV.iloc[sampleID]

    testData = trainCV.iloc[sampleID]
    trainData = trainCV.drop(sampleID)
    k = (g+1)
    #print(type(trainData))
    trX = trainData.iloc[:,:k] #.to_numpy()
    trY = trainData.iloc[:,-1]#.to_numpy()

    teX = testData.iloc[:k].values.reshape(1,-1)#.to_numpy()
    teY = testData.iloc[-1] #.to_numpy()

    #print(type(teX))

    rf = RandomForestClassifier()
    rf.fit(trX, trY)
    yPredRF = rf.predict(teX)
    predictionsRF.append(yPredRF)
    actual.append(teY)
  print(teY)
  print(predictionsRF)
  pRF = accuracy_score(predictionsRF, actual)
  finalAcc.append(pRF)
  print(pRF)

#finalAcc.append(acc)

finalAcc

"""## **Plotting Accuracy after each iteration which includes incorporating one gene at a time to the features for training the data**

"""

genes = [i for i in range(100)]
plt.errorbar(genes,finalAcc,linestyle='-', marker='^', color='green')

plt.title("Plot of accuracy over number of ranked genes")


p1 = mlines.Line2D([], [], color='green', marker='^', linestyle='-',
                          markersize=10, label='Accuracy')




plt.legend(handles=[p1])



plt.xlabel("Number of Genes",size =15)
plt.ylabel("Accuracy Value",size=15)

